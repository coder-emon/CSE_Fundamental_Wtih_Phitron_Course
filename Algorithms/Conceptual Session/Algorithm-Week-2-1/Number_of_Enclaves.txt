// https://leetcode.com/problems/number-of-enclaves/


class Solution {
public:
    bool vis[505][505];
    vector<pair<int,int>> d = {{0,1},{0,-1},{1,0},{-1,0}};

    bool valid(int i, int j, int n, int m){
        return (i >= 0 && i < n && j >= 0 && j < m);
    }

    void dfs(int si, int sj, vector<vector<int>>& grid){
        vis[si][sj] = true;

        for(auto p : d){
            int ci = si + p.first;
            int cj = sj + p.second;
            if(valid(ci,cj, grid.size(), grid[0].size()) && grid[ci][cj] && !vis[ci][cj]){
                dfs(ci,cj,grid);
            }
        }
    }

    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        memset(vis, false, sizeof(vis));

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(i == 0 || j == 0 || i == n - 1 || j == m -1){
                    if(!vis[i][j] && grid[i][j])
                        dfs(i,j,grid);
                }
            }
        }

        int cnt = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(grid[i][j] && !vis[i][j])
                    cnt++;
        
        return cnt;
    }
};
